name: Build and Deploy with MicroK8s

on:
  push:
    branches: [dev]

env:
  IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"root" --silent; do
          echo 'waiting for mysql...'
          sleep 1
        done

    - name: Run tests
      run: ./mvnw clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpass
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

  build-and-publish:
    name: Build and Push Image to GHCR
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
    - name: Mostrar rama actual
      run: "echo 'Rama actual: ${{ github.ref }}'"

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set lowercase owner
      run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

    - name: Build Docker image
      run: docker build -f Dockerfile -t ghcr.io/${OWNER_LC}/backend:latest .

    - name: Push Docker image
      run: docker push ghcr.io/${OWNER_LC}/backend:latest

    - name: Print pushed image URL
      run: "echo 'Imagen publicada: ghcr.io/${OWNER_LC}/backend:latest'"


  deploy-onpremise:
    name: Deploy on MicroK8s On-Premise
    runs-on: self-hosted 
    needs: build-and-publish

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Create namespace if not exists
      run: sudo microk8s kubectl create namespace wikigroup --dry-run=client -o yaml | sudo microk8s kubectl apply -f -
    - name: Apply Kubernetes deployment
      run: sudo microk8s kubectl apply -f K8s/k8s.yaml
    - name: Restart Kubernetes deployment
      run: sudo microk8s kubectl rollout restart deployment/backend -n wikigroup